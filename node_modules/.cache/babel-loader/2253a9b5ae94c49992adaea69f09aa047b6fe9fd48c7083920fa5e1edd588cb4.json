{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT;\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY;\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION;\n\n// פונקציית השהייה\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// פור בקשות עם מגבלת קצב\nclass RequestQueue {\n  constructor(requestsPerSecond = 1) {\n    this.queue = [];\n    this.isProcessing = false;\n    this.requestsPerSecond = requestsPerSecond;\n  }\n  async add(fn) {\n    return new Promise((resolve, reject) => {\n      this.queue.push({\n        fn,\n        resolve,\n        reject\n      });\n      if (!this.isProcessing) {\n        this.process();\n      }\n    });\n  }\n  async process() {\n    this.isProcessing = true;\n    while (this.queue.length > 0) {\n      const {\n        fn,\n        resolve,\n        reject\n      } = this.queue.shift();\n      try {\n        const result = await fn();\n        resolve(result);\n      } catch (error) {\n        reject(error);\n      }\n      // המתנה בין בקשות\n      await delay(1000 / this.requestsPerSecond);\n    }\n    this.isProcessing = false;\n  }\n}\n\n// יצירת תור בקשות גלובלי\nconst requestQueue = new RequestQueue(0.5); // 1 בקשה כל 2 שניות\n\n// פונקציה לתרגום טקסט בודד\nconst translateSingleText = async (text, targetLang, retries = 3) => {\n  for (let attempt = 0; attempt < retries; attempt++) {\n    try {\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\n        method: 'POST',\n        headers: {\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([{\n          text\n        }])\n      });\n      if (response.status === 429) {\n        const retryAfter = parseInt(response.headers.get('Retry-After') || '2');\n        await delay(retryAfter * 1000);\n        continue;\n      }\n      if (!response.ok) {\n        throw new Error(`שגיאת שרת: ${response.status}`);\n      }\n      const data = await response.json();\n      return data[0].translations[0].text;\n    } catch (error) {\n      if (attempt === retries - 1) throw error;\n      await delay(2000 * (attempt + 1));\n    }\n  }\n  throw new Error('כל הניסיונות נכשלו');\n};\n\n// פונקציה לתרגום טקסט עם תור\nconst translateText = async (text, targetLang) => {\n  return requestQueue.add(async () => {\n    return translateSingleText(text, targetLang);\n  });\n};\n\n// פונקציה לחלוקת טקסט לחלקים\nconst splitTextIntoChunks = (text, maxLength = 4000) => {\n  const sentences = text.split(/([.!?]+\\s)/);\n  const chunks = [];\n  let currentChunk = '';\n  for (let sentence of sentences) {\n    if ((currentChunk + sentence).length <= maxLength) {\n      currentChunk += sentence;\n    } else {\n      if (currentChunk) chunks.push(currentChunk.trim());\n      currentChunk = sentence;\n    }\n  }\n  if (currentChunk) chunks.push(currentChunk.trim());\n  return chunks;\n};\n\n// פונקציה לפירוק קובץ SRT\nconst parseSRT = content => {\n  try {\n    const blocks = content.trim().split('\\n\\n');\n    return blocks.map((block, index) => {\n      const lines = block.split('\\n');\n      if (lines.length < 3) {\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\n      }\n      return {\n        index: index + 1,\n        timeCode: lines[1],\n        text: lines.slice(2).join('\\n')\n      };\n    });\n  } catch (error) {\n    console.error('שגיאה בפירוק הקובץ:', error);\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\n  }\n};\nexport const translateSRT = async (content, targetLang, onProgress) => {\n  try {\n    const blocks = parseSRT(content);\n    const totalBlocks = blocks.length;\n    const translatedBlocks = [];\n    for (let i = 0; i < blocks.length; i++) {\n      const block = blocks[i];\n      try {\n        const translatedText = await translateText(block.text, targetLang);\n        translatedBlocks.push({\n          ...block,\n          text: translatedText\n        });\n        if (onProgress) {\n          onProgress(Math.round((i + 1) / totalBlocks * 100));\n        }\n      } catch (error) {\n        console.error(`שגיאה בתרגום בלוק ${i + 1}:`, error);\n        throw new Error(`שגיאה בתרגום בלוק ${i + 1}: ${error.message}`);\n      }\n    }\n    return translatedBlocks.map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`).join('\\n\\n');\n  } catch (error) {\n    console.error('שגיאה בתרגום הקובץ:', error);\n    throw error;\n  }\n};\nexport const uploadFile = async file => {\n  try {\n    const fileName = `${Date.now()}-${file.name}`;\n    const {\n      data: storageData,\n      error: storageError\n    } = await supabase.storage.from('srt-files').upload(fileName, file);\n    if (storageError) throw storageError;\n    const {\n      data: fileData,\n      error: dbError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      storage_path: storageData.path,\n      size: file.size,\n      created_at: new Date()\n    }]).select();\n    if (dbError) throw dbError;\n    return fileData[0];\n  } catch (error) {\n    console.error('שגיאה בהעלאת הקובץ:', error.message);\n    throw error;\n  }\n};\nexport const getFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('שגיאה בקבלת הקבצים:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","AZURE_ENDPOINT","process","env","REACT_APP_AZURE_TRANSLATOR_ENDPOINT","AZURE_KEY","REACT_APP_AZURE_TRANSLATOR_KEY","AZURE_REGION","REACT_APP_AZURE_REGION","delay","ms","Promise","resolve","setTimeout","RequestQueue","constructor","requestsPerSecond","queue","isProcessing","add","fn","reject","push","length","shift","result","error","requestQueue","translateSingleText","text","targetLang","retries","attempt","response","fetch","method","headers","body","JSON","stringify","status","retryAfter","parseInt","get","ok","Error","data","json","translations","translateText","splitTextIntoChunks","maxLength","sentences","split","chunks","currentChunk","sentence","trim","parseSRT","content","blocks","map","block","index","lines","timeCode","slice","join","console","message","translateSRT","onProgress","totalBlocks","translatedBlocks","i","translatedText","Math","round","uploadFile","file","fileName","Date","now","name","storageData","storageError","storage","from","upload","fileData","dbError","insert","storage_path","path","size","created_at","select","getFiles","order","ascending"],"sources":["C:/Users/Liran/.cursor-tutor/SRT-Translator/src/client/index.js"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT\r\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY\r\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION\r\n\r\n// פונקציית השהייה\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// פור בקשות עם מגבלת קצב\r\nclass RequestQueue {\r\n  constructor(requestsPerSecond = 1) {\r\n    this.queue = [];\r\n    this.isProcessing = false;\r\n    this.requestsPerSecond = requestsPerSecond;\r\n  }\r\n\r\n  async add(fn) {\r\n    return new Promise((resolve, reject) => {\r\n      this.queue.push({ fn, resolve, reject });\r\n      if (!this.isProcessing) {\r\n        this.process();\r\n      }\r\n    });\r\n  }\r\n\r\n  async process() {\r\n    this.isProcessing = true;\r\n    while (this.queue.length > 0) {\r\n      const { fn, resolve, reject } = this.queue.shift();\r\n      try {\r\n        const result = await fn();\r\n        resolve(result);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n      // המתנה בין בקשות\r\n      await delay(1000 / this.requestsPerSecond);\r\n    }\r\n    this.isProcessing = false;\r\n  }\r\n}\r\n\r\n// יצירת תור בקשות גלובלי\r\nconst requestQueue = new RequestQueue(0.5); // 1 בקשה כל 2 שניות\r\n\r\n// פונקציה לתרגום טקסט בודד\r\nconst translateSingleText = async (text, targetLang, retries = 3) => {\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    try {\r\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\r\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify([{ text }])\r\n      });\r\n\r\n      if (response.status === 429) {\r\n        const retryAfter = parseInt(response.headers.get('Retry-After') || '2');\r\n        await delay(retryAfter * 1000);\r\n        continue;\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`שגיאת שרת: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data[0].translations[0].text;\r\n    } catch (error) {\r\n      if (attempt === retries - 1) throw error;\r\n      await delay(2000 * (attempt + 1));\r\n    }\r\n  }\r\n  throw new Error('כל הניסיונות נכשלו');\r\n};\r\n\r\n// פונקציה לתרגום טקסט עם תור\r\nconst translateText = async (text, targetLang) => {\r\n  return requestQueue.add(async () => {\r\n    return translateSingleText(text, targetLang);\r\n  });\r\n};\r\n\r\n// פונקציה לחלוקת טקסט לחלקים\r\nconst splitTextIntoChunks = (text, maxLength = 4000) => {\r\n  const sentences = text.split(/([.!?]+\\s)/);\r\n  const chunks = [];\r\n  let currentChunk = '';\r\n\r\n  for (let sentence of sentences) {\r\n    if ((currentChunk + sentence).length <= maxLength) {\r\n      currentChunk += sentence;\r\n    } else {\r\n      if (currentChunk) chunks.push(currentChunk.trim());\r\n      currentChunk = sentence;\r\n    }\r\n  }\r\n  \r\n  if (currentChunk) chunks.push(currentChunk.trim());\r\n  return chunks;\r\n};\r\n\r\n// פונקציה לפירוק קובץ SRT\r\nconst parseSRT = (content) => {\r\n  try {\r\n    const blocks = content.trim().split('\\n\\n');\r\n    return blocks.map((block, index) => {\r\n      const lines = block.split('\\n');\r\n      if (lines.length < 3) {\r\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\r\n      }\r\n      return {\r\n        index: index + 1,\r\n        timeCode: lines[1],\r\n        text: lines.slice(2).join('\\n')\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('שגיאה בפירוק הקובץ:', error);\r\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const translateSRT = async (content, targetLang, onProgress) => {\r\n  try {\r\n    const blocks = parseSRT(content);\r\n    const totalBlocks = blocks.length;\r\n    const translatedBlocks = [];\r\n\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      const block = blocks[i];\r\n      try {\r\n        const translatedText = await translateText(block.text, targetLang);\r\n        translatedBlocks.push({\r\n          ...block,\r\n          text: translatedText\r\n        });\r\n\r\n        if (onProgress) {\r\n          onProgress(Math.round(((i + 1) / totalBlocks) * 100));\r\n        }\r\n      } catch (error) {\r\n        console.error(`שגיאה בתרגום בלוק ${i + 1}:`, error);\r\n        throw new Error(`שגיאה בתרגום בלוק ${i + 1}: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    return translatedBlocks\r\n      .map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`)\r\n      .join('\\n\\n');\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום הקובץ:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const fileName = `${Date.now()}-${file.name}`\r\n    const { data: storageData, error: storageError } = await supabase.storage\r\n      .from('srt-files')\r\n      .upload(fileName, file)\r\n    \r\n    if (storageError) throw storageError\r\n\r\n    const { data: fileData, error: dbError } = await supabase\r\n      .from('files')\r\n      .insert([\r\n        { \r\n          name: file.name,\r\n          storage_path: storageData.path,\r\n          size: file.size,\r\n          created_at: new Date()\r\n        }\r\n      ])\r\n      .select()\r\n    \r\n    if (dbError) throw dbError\r\n    return fileData[0]\r\n  } catch (error) {\r\n    console.error('שגיאה בהעלאת הקובץ:', error.message)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFiles = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('files')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('שגיאה בקבלת הקבצים:', error.message)\r\n    throw error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}