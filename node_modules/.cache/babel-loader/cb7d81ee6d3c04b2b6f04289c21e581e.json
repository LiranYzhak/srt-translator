{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT;\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY;\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION;\n\n// פונקציית השהייה\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// פונקציה לחלוקת טקסט לחלקים\nconst splitTextIntoChunks = (text, maxLength = 4000) => {\n  const sentences = text.split(/([.!?]+\\s)/);\n  const chunks = [];\n  let currentChunk = '';\n  for (let sentence of sentences) {\n    if ((currentChunk + sentence).length <= maxLength) {\n      currentChunk += sentence;\n    } else {\n      if (currentChunk) chunks.push(currentChunk.trim());\n      currentChunk = sentence;\n    }\n  }\n  if (currentChunk) chunks.push(currentChunk.trim());\n  return chunks;\n};\n\n// פונקציה לתרגום טקסט עם ניסיונות חוזרים\nconst translateTextWithRetry = async (text, targetLang, retries = 3) => {\n  for (let i = 0; i < retries; i++) {\n    try {\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\n        method: 'POST',\n        headers: {\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([{\n          text: text\n        }])\n      });\n      if (response.status === 429) {\n        // אם קיבלנו 429, נחכה זמן ארוך יותר בין הניסיונות\n        const retryAfter = response.headers.get('Retry-After') || 2;\n        await delay(retryAfter * 1000);\n        continue;\n      }\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`שגיאת שרת: ${response.status} - ${errorData}`);\n      }\n      const data = await response.json();\n      return data[0].translations[0].text;\n    } catch (error) {\n      if (i === retries - 1) throw error;\n      await delay(1000 * (i + 1)); // המתנה גדלה בין ניסיונות\n    }\n  }\n};\n\n// פונקציה לתרגום טקסט\nconst translateText = async (text, targetLang) => {\n  try {\n    if (!AZURE_KEY || !AZURE_ENDPOINT) {\n      throw new Error('חסרים פרטי התחברות ל-Azure Translator');\n    }\n    const chunks = splitTextIntoChunks(text);\n    let translatedText = '';\n    for (const chunk of chunks) {\n      // המתנה של 200ms בין בקשות\n      await delay(200);\n      const translatedChunk = await translateTextWithRetry(chunk, targetLang);\n      translatedText += translatedChunk + ' ';\n    }\n    return translatedText.trim();\n  } catch (error) {\n    console.error('שגיאה בתרגום:', error);\n    throw new Error(`שגיאה בתרגום: ${error.message}`);\n  }\n};\n\n// פונקציה לפירוק קובץ SRT\nconst parseSRT = content => {\n  try {\n    const blocks = content.trim().split('\\n\\n');\n    return blocks.map((block, index) => {\n      const lines = block.split('\\n');\n      if (lines.length < 3) {\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\n      }\n      return {\n        index: index + 1,\n        timeCode: lines[1],\n        text: lines.slice(2).join('\\n')\n      };\n    });\n  } catch (error) {\n    console.error('שגיאה בפירוק הקובץ:', error);\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\n  }\n};\nexport const translateSRT = async (content, targetLang, onProgress) => {\n  try {\n    const blocks = parseSRT(content);\n    const translatedBlocks = [];\n    for (let i = 0; i < blocks.length; i++) {\n      const block = blocks[i];\n      const translatedText = await translateText(block.text, targetLang);\n      translatedBlocks.push({\n        ...block,\n        text: translatedText\n      });\n\n      // עדכון התקדמות\n      if (onProgress) {\n        onProgress(Math.round((i + 1) / blocks.length * 100));\n      }\n    }\n    return translatedBlocks.map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`).join('\\n\\n');\n  } catch (error) {\n    console.error('שגיאה בתרגום הקובץ:', error);\n    throw error;\n  }\n};\nexport const uploadFile = async file => {\n  try {\n    const fileName = `${Date.now()}-${file.name}`;\n    const {\n      data: storageData,\n      error: storageError\n    } = await supabase.storage.from('srt-files').upload(fileName, file);\n    if (storageError) throw storageError;\n    const {\n      data: fileData,\n      error: dbError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      storage_path: storageData.path,\n      size: file.size,\n      created_at: new Date()\n    }]).select();\n    if (dbError) throw dbError;\n    return fileData[0];\n  } catch (error) {\n    console.error('שגיאה בהעלאת הקובץ:', error.message);\n    throw error;\n  }\n};\nexport const getFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('שגיאה בקבלת הקבצים:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","AZURE_ENDPOINT","process","env","REACT_APP_AZURE_TRANSLATOR_ENDPOINT","AZURE_KEY","REACT_APP_AZURE_TRANSLATOR_KEY","AZURE_REGION","REACT_APP_AZURE_REGION","delay","ms","Promise","resolve","setTimeout","splitTextIntoChunks","text","maxLength","sentences","split","chunks","currentChunk","sentence","length","push","trim","translateTextWithRetry","targetLang","retries","i","response","fetch","method","headers","body","JSON","stringify","status","retryAfter","get","ok","errorData","Error","data","json","translations","error","translateText","translatedText","chunk","translatedChunk","console","message","parseSRT","content","blocks","map","block","index","lines","timeCode","slice","join","translateSRT","onProgress","translatedBlocks","Math","round","uploadFile","file","fileName","Date","now","name","storageData","storageError","storage","from","upload","fileData","dbError","insert","storage_path","path","size","created_at","select","getFiles","order","ascending"],"sources":["C:/Users/Liran/.cursor-tutor/srt-translator/src/client/index.js"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT\r\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY\r\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION\r\n\r\n// פונקציית השהייה\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// פונקציה לחלוקת טקסט לחלקים\r\nconst splitTextIntoChunks = (text, maxLength = 4000) => {\r\n  const sentences = text.split(/([.!?]+\\s)/);\r\n  const chunks = [];\r\n  let currentChunk = '';\r\n\r\n  for (let sentence of sentences) {\r\n    if ((currentChunk + sentence).length <= maxLength) {\r\n      currentChunk += sentence;\r\n    } else {\r\n      if (currentChunk) chunks.push(currentChunk.trim());\r\n      currentChunk = sentence;\r\n    }\r\n  }\r\n  \r\n  if (currentChunk) chunks.push(currentChunk.trim());\r\n  return chunks;\r\n};\r\n\r\n// פונקציה לתרגום טקסט עם ניסיונות חוזרים\r\nconst translateTextWithRetry = async (text, targetLang, retries = 3) => {\r\n  for (let i = 0; i < retries; i++) {\r\n    try {\r\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\r\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify([{\r\n          text: text\r\n        }])\r\n      });\r\n\r\n      if (response.status === 429) {\r\n        // אם קיבלנו 429, נחכה זמן ארוך יותר בין הניסיונות\r\n        const retryAfter = response.headers.get('Retry-After') || 2;\r\n        await delay(retryAfter * 1000);\r\n        continue;\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.text();\r\n        throw new Error(`שגיאת שרת: ${response.status} - ${errorData}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data[0].translations[0].text;\r\n    } catch (error) {\r\n      if (i === retries - 1) throw error;\r\n      await delay(1000 * (i + 1)); // המתנה גדלה בין ניסיונות\r\n    }\r\n  }\r\n};\r\n\r\n// פונקציה לתרגום טקסט\r\nconst translateText = async (text, targetLang) => {\r\n  try {\r\n    if (!AZURE_KEY || !AZURE_ENDPOINT) {\r\n      throw new Error('חסרים פרטי התחברות ל-Azure Translator');\r\n    }\r\n\r\n    const chunks = splitTextIntoChunks(text);\r\n    let translatedText = '';\r\n\r\n    for (const chunk of chunks) {\r\n      // המתנה של 200ms בין בקשות\r\n      await delay(200);\r\n      const translatedChunk = await translateTextWithRetry(chunk, targetLang);\r\n      translatedText += translatedChunk + ' ';\r\n    }\r\n\r\n    return translatedText.trim();\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום:', error);\r\n    throw new Error(`שגיאה בתרגום: ${error.message}`);\r\n  }\r\n};\r\n\r\n// פונקציה לפירוק קובץ SRT\r\nconst parseSRT = (content) => {\r\n  try {\r\n    const blocks = content.trim().split('\\n\\n');\r\n    return blocks.map((block, index) => {\r\n      const lines = block.split('\\n');\r\n      if (lines.length < 3) {\r\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\r\n      }\r\n      return {\r\n        index: index + 1,\r\n        timeCode: lines[1],\r\n        text: lines.slice(2).join('\\n')\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('שגיאה בפירוק הקובץ:', error);\r\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const translateSRT = async (content, targetLang, onProgress) => {\r\n  try {\r\n    const blocks = parseSRT(content);\r\n    const translatedBlocks = [];\r\n    \r\n    for (let i = 0; i < blocks.length; i++) {\r\n      const block = blocks[i];\r\n      const translatedText = await translateText(block.text, targetLang);\r\n      translatedBlocks.push({\r\n        ...block,\r\n        text: translatedText\r\n      });\r\n      \r\n      // עדכון התקדמות\r\n      if (onProgress) {\r\n        onProgress(Math.round((i + 1) / blocks.length * 100));\r\n      }\r\n    }\r\n    \r\n    return translatedBlocks\r\n      .map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`)\r\n      .join('\\n\\n');\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום הקובץ:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const fileName = `${Date.now()}-${file.name}`\r\n    const { data: storageData, error: storageError } = await supabase.storage\r\n      .from('srt-files')\r\n      .upload(fileName, file)\r\n    \r\n    if (storageError) throw storageError\r\n\r\n    const { data: fileData, error: dbError } = await supabase\r\n      .from('files')\r\n      .insert([\r\n        { \r\n          name: file.name,\r\n          storage_path: storageData.path,\r\n          size: file.size,\r\n          created_at: new Date()\r\n        }\r\n      ])\r\n      .select()\r\n    \r\n    if (dbError) throw dbError\r\n    return fileData[0]\r\n  } catch (error) {\r\n    console.error('שגיאה בהעלאת הקובץ:', error.message)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFiles = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('files')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('שגיאה בקבלת הקבצים:', error.message)\r\n    throw error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}