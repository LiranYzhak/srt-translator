{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT;\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY;\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION || 'eastus';\n\n// פונקציה לתרגום טקסט באמצעות Azure\nconst translateText = async (text, targetLang) => {\n  const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\n    method: 'POST',\n    headers: {\n      'Ocp-Apim-Subscription-Key': AZURE_KEY,\n      'Ocp-Apim-Subscription-Region': AZURE_REGION,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify([{\n      text: text\n    }])\n  });\n  if (!response.ok) {\n    throw new Error('שגיאה בתרגום');\n  }\n  const data = await response.json();\n  return data[0].translations[0].text;\n};\n\n// פונקציה לפירוק קובץ SRT\nconst parseSRT = content => {\n  const blocks = content.trim().split('\\n\\n');\n  return blocks.map(block => {\n    const [index, timeCode, ...textLines] = block.split('\\n');\n    return {\n      index: parseInt(index),\n      timeCode,\n      text: textLines.join('\\n')\n    };\n  });\n};\n\n// פונקציה להרכבת קובץ SRT\nconst buildSRT = blocks => {\n  return blocks.map(block => {\n    return `${block.index}\\n${block.timeCode}\\n${block.text}`;\n  }).join('\\n\\n');\n};\nexport const translateSRT = async (content, targetLang) => {\n  try {\n    // פירוק הקובץ לבלוקים\n    const blocks = parseSRT(content);\n\n    // תרגום כל בלוק\n    const translatedBlocks = await Promise.all(blocks.map(async block => {\n      const translatedText = await translateText(block.text, targetLang);\n      return {\n        ...block,\n        text: translatedText\n      };\n    }));\n\n    // הרכבת הקובץ מחדש\n    return buildSRT(translatedBlocks);\n  } catch (error) {\n    console.error('שגיאה בתרגום:', error);\n    throw error;\n  }\n};\nexport const uploadFile = async file => {\n  try {\n    const fileName = `${Date.now()}-${file.name}`;\n    const {\n      data: storageData,\n      error: storageError\n    } = await supabase.storage.from('srt-files').upload(fileName, file);\n    if (storageError) throw storageError;\n    const {\n      data: fileData,\n      error: dbError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      storage_path: storageData.path,\n      size: file.size,\n      created_at: new Date()\n    }]).select();\n    if (dbError) throw dbError;\n    return fileData[0];\n  } catch (error) {\n    console.error('שגיאה בהעלאת הקובץ:', error.message);\n    throw error;\n  }\n};\nexport const getFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('שגיאה בקבלת הקבצים:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","AZURE_ENDPOINT","process","env","REACT_APP_AZURE_TRANSLATOR_ENDPOINT","AZURE_KEY","REACT_APP_AZURE_TRANSLATOR_KEY","AZURE_REGION","REACT_APP_AZURE_REGION","translateText","text","targetLang","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","translations","parseSRT","content","blocks","trim","split","map","block","index","timeCode","textLines","parseInt","join","buildSRT","translateSRT","translatedBlocks","Promise","all","translatedText","error","console","uploadFile","file","fileName","Date","now","name","storageData","storageError","storage","from","upload","fileData","dbError","insert","storage_path","path","size","created_at","select","message","getFiles","order","ascending"],"sources":["C:/Users/Liran/.cursor-tutor/SRT-Translator/src/client/index.js"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT\r\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY\r\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION || 'eastus'\r\n\r\n// פונקציה לתרגום טקסט באמצעות Azure\r\nconst translateText = async (text, targetLang) => {\r\n  const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Ocp-Apim-Subscription-Key': AZURE_KEY,\r\n      'Ocp-Apim-Subscription-Region': AZURE_REGION,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify([{\r\n      text: text\r\n    }])\r\n  })\r\n\r\n  if (!response.ok) {\r\n    throw new Error('שגיאה בתרגום')\r\n  }\r\n\r\n  const data = await response.json()\r\n  return data[0].translations[0].text\r\n}\r\n\r\n// פונקציה לפירוק קובץ SRT\r\nconst parseSRT = (content) => {\r\n  const blocks = content.trim().split('\\n\\n')\r\n  return blocks.map(block => {\r\n    const [index, timeCode, ...textLines] = block.split('\\n')\r\n    return {\r\n      index: parseInt(index),\r\n      timeCode,\r\n      text: textLines.join('\\n')\r\n    }\r\n  })\r\n}\r\n\r\n// פונקציה להרכבת קובץ SRT\r\nconst buildSRT = (blocks) => {\r\n  return blocks.map(block => {\r\n    return `${block.index}\\n${block.timeCode}\\n${block.text}`\r\n  }).join('\\n\\n')\r\n}\r\n\r\nexport const translateSRT = async (content, targetLang) => {\r\n  try {\r\n    // פירוק הקובץ לבלוקים\r\n    const blocks = parseSRT(content)\r\n    \r\n    // תרגום כל בלוק\r\n    const translatedBlocks = await Promise.all(\r\n      blocks.map(async (block) => {\r\n        const translatedText = await translateText(block.text, targetLang)\r\n        return {\r\n          ...block,\r\n          text: translatedText\r\n        }\r\n      })\r\n    )\r\n    \r\n    // הרכבת הקובץ מחדש\r\n    return buildSRT(translatedBlocks)\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום:', error)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const fileName = `${Date.now()}-${file.name}`\r\n    const { data: storageData, error: storageError } = await supabase.storage\r\n      .from('srt-files')\r\n      .upload(fileName, file)\r\n    \r\n    if (storageError) throw storageError\r\n\r\n    const { data: fileData, error: dbError } = await supabase\r\n      .from('files')\r\n      .insert([\r\n        { \r\n          name: file.name,\r\n          storage_path: storageData.path,\r\n          size: file.size,\r\n          created_at: new Date()\r\n        }\r\n      ])\r\n      .select()\r\n    \r\n    if (dbError) throw dbError\r\n    return fileData[0]\r\n  } catch (error) {\r\n    console.error('שגיאה בהעלאת הקובץ:', error.message)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFiles = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('files')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('שגיאה בקבלת הקבצים:', error.message)\r\n    throw error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}