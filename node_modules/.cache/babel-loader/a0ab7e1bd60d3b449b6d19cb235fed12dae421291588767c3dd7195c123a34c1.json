{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT;\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY;\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION || 'eastus';\n\n// פונקציה לתרגום טקסט באמצעות Azure\nconst translateText = async (text, targetLang) => {\n  try {\n    console.log('מנסה לתרגם:', {\n      text,\n      targetLang,\n      endpoint: AZURE_ENDPOINT\n    }); // לוג לבדיקה\n\n    if (!AZURE_KEY || !AZURE_ENDPOINT) {\n      throw new Error('חסרים פרטי התחברות ל-Azure Translator');\n    }\n    const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\n      method: 'POST',\n      headers: {\n        'Ocp-Apim-Subscription-Key': AZURE_KEY,\n        'Ocp-Apim-Subscription-Region': AZURE_REGION,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([{\n        text: text\n      }])\n    });\n    console.log('תגובת השרת:', response.status); // לוג לבדיקה\n\n    if (!response.ok) {\n      const errorData = await response.text();\n      console.error('שגיאת שרת:', errorData); // לוג לבדיקה\n      throw new Error(`שגיאת שרת: ${response.status} - ${errorData}`);\n    }\n    const data = await response.json();\n    console.log('תוצאת התרגום:', data); // לוג לבדיקה\n\n    if (!data || !data[0] || !data[0].translations || !data[0].translations[0]) {\n      throw new Error('התקבל מבנה לא תקין מהשרת');\n    }\n    return data[0].translations[0].text;\n  } catch (error) {\n    console.error('שגיאה בתרגום:', error); // לוג לבדיקה\n    throw new Error(`שגיאה בתרגום: ${error.message}`);\n  }\n};\n\n// פונקציה לפירוק קובץ SRT\nconst parseSRT = content => {\n  try {\n    const blocks = content.trim().split('\\n\\n');\n    return blocks.map((block, index) => {\n      const lines = block.split('\\n');\n      if (lines.length < 3) {\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\n      }\n      return {\n        index: index + 1,\n        timeCode: lines[1],\n        text: lines.slice(2).join('\\n')\n      };\n    });\n  } catch (error) {\n    console.error('שגיאה בפירוק הקובץ:', error);\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\n  }\n};\nexport const translateSRT = async (content, targetLang) => {\n  try {\n    console.log('מתחיל תרגום קובץ...'); // לוג לבדיקה\n\n    // פירוק הקובץ לבלוקים\n    const blocks = parseSRT(content);\n    console.log('מספר בלוקים:', blocks.length); // לוג לבדיקה\n\n    // תרגום כל בלוק\n    const translatedBlocks = await Promise.all(blocks.map(async block => {\n      try {\n        const translatedText = await translateText(block.text, targetLang);\n        return {\n          ...block,\n          text: translatedText\n        };\n      } catch (error) {\n        console.error(`שגיאה בתרגום בלוק ${block.index}:`, error);\n        throw error;\n      }\n    }));\n\n    // הרכבת הקובץ מחדש\n    return translatedBlocks.map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`).join('\\n\\n');\n  } catch (error) {\n    console.error('שגיאה בתרגום הקובץ:', error);\n    throw error;\n  }\n};\nexport const uploadFile = async file => {\n  try {\n    const fileName = `${Date.now()}-${file.name}`;\n    const {\n      data: storageData,\n      error: storageError\n    } = await supabase.storage.from('srt-files').upload(fileName, file);\n    if (storageError) throw storageError;\n    const {\n      data: fileData,\n      error: dbError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      storage_path: storageData.path,\n      size: file.size,\n      created_at: new Date()\n    }]).select();\n    if (dbError) throw dbError;\n    return fileData[0];\n  } catch (error) {\n    console.error('שגיאה בהעלאת הקובץ:', error.message);\n    throw error;\n  }\n};\nexport const getFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('שגיאה בקבלת הקבצים:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","AZURE_ENDPOINT","process","env","REACT_APP_AZURE_TRANSLATOR_ENDPOINT","AZURE_KEY","REACT_APP_AZURE_TRANSLATOR_KEY","AZURE_REGION","REACT_APP_AZURE_REGION","translateText","text","targetLang","console","log","endpoint","Error","response","fetch","method","headers","body","JSON","stringify","status","ok","errorData","error","data","json","translations","message","parseSRT","content","blocks","trim","split","map","block","index","lines","length","timeCode","slice","join","translateSRT","translatedBlocks","Promise","all","translatedText","uploadFile","file","fileName","Date","now","name","storageData","storageError","storage","from","upload","fileData","dbError","insert","storage_path","path","size","created_at","select","getFiles","order","ascending"],"sources":["C:/Users/Liran/.cursor-tutor/SRT-Translator/src/client/index.js"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT\r\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY\r\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION || 'eastus'\r\n\r\n// פונקציה לתרגום טקסט באמצעות Azure\r\nconst translateText = async (text, targetLang) => {\r\n  try {\r\n    console.log('מנסה לתרגם:', { text, targetLang, endpoint: AZURE_ENDPOINT }); // לוג לבדיקה\r\n\r\n    if (!AZURE_KEY || !AZURE_ENDPOINT) {\r\n      throw new Error('חסרים פרטי התחברות ל-Azure Translator');\r\n    }\r\n\r\n    const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Ocp-Apim-Subscription-Key': AZURE_KEY,\r\n        'Ocp-Apim-Subscription-Region': AZURE_REGION,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify([{\r\n        text: text\r\n      }])\r\n    });\r\n\r\n    console.log('תגובת השרת:', response.status); // לוג לבדיקה\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      console.error('שגיאת שרת:', errorData); // לוג לבדיקה\r\n      throw new Error(`שגיאת שרת: ${response.status} - ${errorData}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log('תוצאת התרגום:', data); // לוג לבדיקה\r\n\r\n    if (!data || !data[0] || !data[0].translations || !data[0].translations[0]) {\r\n      throw new Error('התקבל מבנה לא תקין מהשרת');\r\n    }\r\n\r\n    return data[0].translations[0].text;\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום:', error); // לוג לבדיקה\r\n    throw new Error(`שגיאה בתרגום: ${error.message}`);\r\n  }\r\n}\r\n\r\n// פונקציה לפירוק קובץ SRT\r\nconst parseSRT = (content) => {\r\n  try {\r\n    const blocks = content.trim().split('\\n\\n');\r\n    return blocks.map((block, index) => {\r\n      const lines = block.split('\\n');\r\n      if (lines.length < 3) {\r\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\r\n      }\r\n      return {\r\n        index: index + 1,\r\n        timeCode: lines[1],\r\n        text: lines.slice(2).join('\\n')\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('שגיאה בפירוק הקובץ:', error);\r\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\r\n  }\r\n}\r\n\r\nexport const translateSRT = async (content, targetLang) => {\r\n  try {\r\n    console.log('מתחיל תרגום קובץ...'); // לוג לבדיקה\r\n    \r\n    // פירוק הקובץ לבלוקים\r\n    const blocks = parseSRT(content);\r\n    console.log('מספר בלוקים:', blocks.length); // לוג לבדיקה\r\n    \r\n    // תרגום כל בלוק\r\n    const translatedBlocks = await Promise.all(\r\n      blocks.map(async (block) => {\r\n        try {\r\n          const translatedText = await translateText(block.text, targetLang);\r\n          return {\r\n            ...block,\r\n            text: translatedText\r\n          };\r\n        } catch (error) {\r\n          console.error(`שגיאה בתרגום בלוק ${block.index}:`, error);\r\n          throw error;\r\n        }\r\n      })\r\n    );\r\n    \r\n    // הרכבת הקובץ מחדש\r\n    return translatedBlocks\r\n      .map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`)\r\n      .join('\\n\\n');\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום הקובץ:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const fileName = `${Date.now()}-${file.name}`\r\n    const { data: storageData, error: storageError } = await supabase.storage\r\n      .from('srt-files')\r\n      .upload(fileName, file)\r\n    \r\n    if (storageError) throw storageError\r\n\r\n    const { data: fileData, error: dbError } = await supabase\r\n      .from('files')\r\n      .insert([\r\n        { \r\n          name: file.name,\r\n          storage_path: storageData.path,\r\n          size: file.size,\r\n          created_at: new Date()\r\n        }\r\n      ])\r\n      .select()\r\n    \r\n    if (dbError) throw dbError\r\n    return fileData[0]\r\n  } catch (error) {\r\n    console.error('שגיאה בהעלאת הקובץ:', error.message)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFiles = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('files')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('שגיאה בקבלת הקבצים:', error.message)\r\n    throw error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}