{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT;\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY;\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION;\n\n// פונקציה לחלוקת טקסט לחלקים\nconst splitTextIntoChunks = (text, maxLength = 4000) => {\n  const sentences = text.split(/([.!?]+\\s)/);\n  const chunks = [];\n  let currentChunk = '';\n  for (let sentence of sentences) {\n    if ((currentChunk + sentence).length <= maxLength) {\n      currentChunk += sentence;\n    } else {\n      if (currentChunk) chunks.push(currentChunk.trim());\n      currentChunk = sentence;\n    }\n  }\n  if (currentChunk) chunks.push(currentChunk.trim());\n  return chunks;\n};\n\n// פונקציה לתרגום טקסט\nconst translateText = async (text, targetLang) => {\n  try {\n    if (!AZURE_KEY || !AZURE_ENDPOINT) {\n      throw new Error('חסרים פרטי התחברות ל-Azure Translator');\n    }\n\n    // חלוקת הטקסט לחלקים אם הוא ארוך מדי\n    const chunks = splitTextIntoChunks(text);\n    let translatedText = '';\n\n    // תרגום כל חלק בנפרד\n    for (const chunk of chunks) {\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\n        method: 'POST',\n        headers: {\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([{\n          text: chunk\n        }])\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`שגיאת שרת: ${response.status} - ${errorData}`);\n      }\n      const data = await response.json();\n      translatedText += data[0].translations[0].text + ' ';\n    }\n    return translatedText.trim();\n  } catch (error) {\n    console.error('שגיאה בתרגום:', error);\n    throw new Error(`שגיאה בתרגום: ${error.message}`);\n  }\n};\n\n// פונקציה לפירוק קובץ SRT\nconst parseSRT = content => {\n  try {\n    const blocks = content.trim().split('\\n\\n');\n    return blocks.map((block, index) => {\n      const lines = block.split('\\n');\n      if (lines.length < 3) {\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\n      }\n      return {\n        index: index + 1,\n        timeCode: lines[1],\n        text: lines.slice(2).join('\\n')\n      };\n    });\n  } catch (error) {\n    console.error('שגיאה בפירוק הקובץ:', error);\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\n  }\n};\nexport const translateSRT = async (content, targetLang) => {\n  try {\n    // פירוק הקובץ לבלוקים\n    const blocks = parseSRT(content);\n\n    // תרגום כל בלוק בנפרד\n    const translatedBlocks = [];\n    for (const block of blocks) {\n      const translatedText = await translateText(block.text, targetLang);\n      translatedBlocks.push({\n        ...block,\n        text: translatedText\n      });\n    }\n\n    // הרכבת הקובץ מחדש\n    return translatedBlocks.map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`).join('\\n\\n');\n  } catch (error) {\n    console.error('שגיאה בתרגום הקובץ:', error);\n    throw error;\n  }\n};\nexport const uploadFile = async file => {\n  try {\n    const fileName = `${Date.now()}-${file.name}`;\n    const {\n      data: storageData,\n      error: storageError\n    } = await supabase.storage.from('srt-files').upload(fileName, file);\n    if (storageError) throw storageError;\n    const {\n      data: fileData,\n      error: dbError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      storage_path: storageData.path,\n      size: file.size,\n      created_at: new Date()\n    }]).select();\n    if (dbError) throw dbError;\n    return fileData[0];\n  } catch (error) {\n    console.error('שגיאה בהעלאת הקובץ:', error.message);\n    throw error;\n  }\n};\nexport const getFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('שגיאה בקבלת הקבצים:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","AZURE_ENDPOINT","process","env","REACT_APP_AZURE_TRANSLATOR_ENDPOINT","AZURE_KEY","REACT_APP_AZURE_TRANSLATOR_KEY","AZURE_REGION","REACT_APP_AZURE_REGION","splitTextIntoChunks","text","maxLength","sentences","split","chunks","currentChunk","sentence","length","push","trim","translateText","targetLang","Error","translatedText","chunk","response","fetch","method","headers","body","JSON","stringify","ok","errorData","status","data","json","translations","error","console","message","parseSRT","content","blocks","map","block","index","lines","timeCode","slice","join","translateSRT","translatedBlocks","uploadFile","file","fileName","Date","now","name","storageData","storageError","storage","from","upload","fileData","dbError","insert","storage_path","path","size","created_at","select","getFiles","order","ascending"],"sources":["C:/Users/Liran/.cursor-tutor/srt-translator/src/client/index.js"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT\r\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY\r\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION\r\n\r\n// פונקציה לחלוקת טקסט לחלקים\r\nconst splitTextIntoChunks = (text, maxLength = 4000) => {\r\n  const sentences = text.split(/([.!?]+\\s)/);\r\n  const chunks = [];\r\n  let currentChunk = '';\r\n\r\n  for (let sentence of sentences) {\r\n    if ((currentChunk + sentence).length <= maxLength) {\r\n      currentChunk += sentence;\r\n    } else {\r\n      if (currentChunk) chunks.push(currentChunk.trim());\r\n      currentChunk = sentence;\r\n    }\r\n  }\r\n  \r\n  if (currentChunk) chunks.push(currentChunk.trim());\r\n  return chunks;\r\n};\r\n\r\n// פונקציה לתרגום טקסט\r\nconst translateText = async (text, targetLang) => {\r\n  try {\r\n    if (!AZURE_KEY || !AZURE_ENDPOINT) {\r\n      throw new Error('חסרים פרטי התחברות ל-Azure Translator');\r\n    }\r\n\r\n    // חלוקת הטקסט לחלקים אם הוא ארוך מדי\r\n    const chunks = splitTextIntoChunks(text);\r\n    let translatedText = '';\r\n\r\n    // תרגום כל חלק בנפרד\r\n    for (const chunk of chunks) {\r\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\r\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify([{\r\n          text: chunk\r\n        }])\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.text();\r\n        throw new Error(`שגיאת שרת: ${response.status} - ${errorData}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      translatedText += data[0].translations[0].text + ' ';\r\n    }\r\n\r\n    return translatedText.trim();\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום:', error);\r\n    throw new Error(`שגיאה בתרגום: ${error.message}`);\r\n  }\r\n};\r\n\r\n// פונקציה לפירוק קובץ SRT\r\nconst parseSRT = (content) => {\r\n  try {\r\n    const blocks = content.trim().split('\\n\\n');\r\n    return blocks.map((block, index) => {\r\n      const lines = block.split('\\n');\r\n      if (lines.length < 3) {\r\n        throw new Error(`בלוק לא תקין במיקום ${index + 1}`);\r\n      }\r\n      return {\r\n        index: index + 1,\r\n        timeCode: lines[1],\r\n        text: lines.slice(2).join('\\n')\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('שגיאה בפירוק הקובץ:', error);\r\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const translateSRT = async (content, targetLang) => {\r\n  try {\r\n    // פירוק הקובץ לבלוקים\r\n    const blocks = parseSRT(content);\r\n    \r\n    // תרגום כל בלוק בנפרד\r\n    const translatedBlocks = [];\r\n    for (const block of blocks) {\r\n      const translatedText = await translateText(block.text, targetLang);\r\n      translatedBlocks.push({\r\n        ...block,\r\n        text: translatedText\r\n      });\r\n    }\r\n    \r\n    // הרכבת הקובץ מחדש\r\n    return translatedBlocks\r\n      .map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`)\r\n      .join('\\n\\n');\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום הקובץ:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const fileName = `${Date.now()}-${file.name}`\r\n    const { data: storageData, error: storageError } = await supabase.storage\r\n      .from('srt-files')\r\n      .upload(fileName, file)\r\n    \r\n    if (storageError) throw storageError\r\n\r\n    const { data: fileData, error: dbError } = await supabase\r\n      .from('files')\r\n      .insert([\r\n        { \r\n          name: file.name,\r\n          storage_path: storageData.path,\r\n          size: file.size,\r\n          created_at: new Date()\r\n        }\r\n      ])\r\n      .select()\r\n    \r\n    if (dbError) throw dbError\r\n    return fileData[0]\r\n  } catch (error) {\r\n    console.error('שגיאה בהעלאת הקובץ:', error.message)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFiles = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('files')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('שגיאה בקבלת הקבצים:', error.message)\r\n    throw error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}