{"ast":null,"code":"import { supabase } from './supabaseClient';\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT;\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY;\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION;\n\n// פונקציית השהייה\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// פורקציה לניקוי טקסט\nconst cleanText = text => {\n  return text.trim().replace(/\\r\\n/g, '\\n').replace(/\\n+/g, ' ').replace(/\\s+/g, ' ');\n};\n\n// פונקציה לתרגום טקסט בודד\nconst translateSingleText = async (text, targetLang, retries = 3) => {\n  const cleanedText = cleanText(text);\n\n  // אם הטקסט ריק, נחזיר טקסט ריק\n  if (!cleanedText) {\n    return '';\n  }\n  for (let attempt = 0; attempt < retries; attempt++) {\n    try {\n      console.log(`מנסה לתרגם: \"${cleanedText}\"`); // לוג לבדיקה\n\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\n        method: 'POST',\n        headers: {\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify([{\n          text: cleanedText\n        }])\n      });\n      const responseText = await response.text();\n      console.log('תגובת השרת:', response.status, responseText); // לוג לבדיקה\n\n      if (response.status === 429) {\n        console.log('התקבלה שגיאת Rate Limit, ממתין...'); // לוג לבדיקה\n        const retryAfter = parseInt(response.headers.get('Retry-After') || '2');\n        await delay(retryAfter * 1000);\n        continue;\n      }\n      if (!response.ok) {\n        throw new Error(`שגיאת שרת: ${response.status} - ${responseText}`);\n      }\n      const data = JSON.parse(responseText);\n      return data[0].translations[0].text;\n    } catch (error) {\n      console.error(`ניסיון ${attempt + 1} נכשל:`, error); // לוג לבדיקה\n      if (attempt === retries - 1) throw error;\n      await delay(2000 * (attempt + 1));\n    }\n  }\n  throw new Error('כל הניסיונות נכשלו');\n};\n\n// פונקציה לפירוק קובץ SRT\nconst parseSRT = content => {\n  try {\n    const blocks = content.trim().split('\\n\\n');\n    return blocks.map((block, index) => {\n      const lines = block.split('\\n');\n      if (lines.length < 3) {\n        console.log(`בלוק ${index + 1} לא תקין:`, lines); // לוג לבדיקה\n        return {\n          index: index + 1,\n          timeCode: lines[1] || '',\n          text: lines[2] || ''\n        };\n      }\n      return {\n        index: index + 1,\n        timeCode: lines[1],\n        text: lines.slice(2).join('\\n')\n      };\n    });\n  } catch (error) {\n    console.error('שגיאה בפירוק הקובץ:', error);\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\n  }\n};\nexport const translateSRT = async (content, targetLang, onProgress) => {\n  try {\n    console.log('מתחיל תרגום...'); // לוג לבדיקה\n    const blocks = parseSRT(content);\n    console.log(`נמצאו ${blocks.length} בלוקים`); // לוג לבדיקה\n\n    const translatedBlocks = [];\n    let lastProgress = 0;\n    for (let i = 0; i < blocks.length; i++) {\n      const block = blocks[i];\n      try {\n        console.log(`מתרגם בלוק ${i + 1}/${blocks.length}`); // לוג לבדיקה\n        const translatedText = await translateSingleText(block.text, targetLang);\n        translatedBlocks.push({\n          ...block,\n          text: translatedText\n        });\n        const progress = Math.round((i + 1) / blocks.length * 100);\n        if (progress > lastProgress) {\n          lastProgress = progress;\n          if (onProgress) {\n            onProgress(progress);\n          }\n        }\n      } catch (error) {\n        console.error(`שגיאה בתרגום בלוק ${i + 1}:`, error);\n        throw new Error(`שגיאה בתרגום בלוק ${i + 1}: ${error.message}`);\n      }\n    }\n    const result = translatedBlocks.map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`).join('\\n\\n');\n    console.log('התרגום הושלם בהצלחה'); // לוג לבדיקה\n    return result;\n  } catch (error) {\n    console.error('שגיאה בתרגום הקובץ:', error);\n    throw error;\n  }\n};\nexport const uploadFile = async file => {\n  try {\n    const fileName = `${Date.now()}-${file.name}`;\n    const {\n      data: storageData,\n      error: storageError\n    } = await supabase.storage.from('srt-files').upload(fileName, file);\n    if (storageError) throw storageError;\n    const {\n      data: fileData,\n      error: dbError\n    } = await supabase.from('files').insert([{\n      name: file.name,\n      storage_path: storageData.path,\n      size: file.size,\n      created_at: new Date()\n    }]).select();\n    if (dbError) throw dbError;\n    return fileData[0];\n  } catch (error) {\n    console.error('שגיאה בהעלאת הקובץ:', error.message);\n    throw error;\n  }\n};\nexport const getFiles = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('files').select('*').order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('שגיאה בקבלת הקבצים:', error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["supabase","AZURE_ENDPOINT","process","env","REACT_APP_AZURE_TRANSLATOR_ENDPOINT","AZURE_KEY","REACT_APP_AZURE_TRANSLATOR_KEY","AZURE_REGION","REACT_APP_AZURE_REGION","delay","ms","Promise","resolve","setTimeout","cleanText","text","trim","replace","translateSingleText","targetLang","retries","cleanedText","attempt","console","log","response","fetch","method","headers","body","JSON","stringify","responseText","status","retryAfter","parseInt","get","ok","Error","data","parse","translations","error","parseSRT","content","blocks","split","map","block","index","lines","length","timeCode","slice","join","message","translateSRT","onProgress","translatedBlocks","lastProgress","i","translatedText","push","progress","Math","round","result","uploadFile","file","fileName","Date","now","name","storageData","storageError","storage","from","upload","fileData","dbError","insert","storage_path","path","size","created_at","select","getFiles","order","ascending"],"sources":["C:/Users/Liran/.cursor-tutor/SRT-Translator/src/client/index.js"],"sourcesContent":["import { supabase } from './supabaseClient'\r\n\r\nconst AZURE_ENDPOINT = process.env.REACT_APP_AZURE_TRANSLATOR_ENDPOINT\r\nconst AZURE_KEY = process.env.REACT_APP_AZURE_TRANSLATOR_KEY\r\nconst AZURE_REGION = process.env.REACT_APP_AZURE_REGION\r\n\r\n// פונקציית השהייה\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// פורקציה לניקוי טקסט\r\nconst cleanText = (text) => {\r\n  return text\r\n    .trim()\r\n    .replace(/\\r\\n/g, '\\n')\r\n    .replace(/\\n+/g, ' ')\r\n    .replace(/\\s+/g, ' ');\r\n};\r\n\r\n// פונקציה לתרגום טקסט בודד\r\nconst translateSingleText = async (text, targetLang, retries = 3) => {\r\n  const cleanedText = cleanText(text);\r\n  \r\n  // אם הטקסט ריק, נחזיר טקסט ריק\r\n  if (!cleanedText) {\r\n    return '';\r\n  }\r\n\r\n  for (let attempt = 0; attempt < retries; attempt++) {\r\n    try {\r\n      console.log(`מנסה לתרגם: \"${cleanedText}\"`); // לוג לבדיקה\r\n\r\n      const response = await fetch(`${AZURE_ENDPOINT}/translate?api-version=3.0&to=${targetLang}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Ocp-Apim-Subscription-Key': AZURE_KEY,\r\n          'Ocp-Apim-Subscription-Region': AZURE_REGION,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify([{ text: cleanedText }])\r\n      });\r\n\r\n      const responseText = await response.text();\r\n      console.log('תגובת השרת:', response.status, responseText); // לוג לבדיקה\r\n\r\n      if (response.status === 429) {\r\n        console.log('התקבלה שגיאת Rate Limit, ממתין...'); // לוג לבדיקה\r\n        const retryAfter = parseInt(response.headers.get('Retry-After') || '2');\r\n        await delay(retryAfter * 1000);\r\n        continue;\r\n      }\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`שגיאת שרת: ${response.status} - ${responseText}`);\r\n      }\r\n\r\n      const data = JSON.parse(responseText);\r\n      return data[0].translations[0].text;\r\n    } catch (error) {\r\n      console.error(`ניסיון ${attempt + 1} נכשל:`, error); // לוג לבדיקה\r\n      if (attempt === retries - 1) throw error;\r\n      await delay(2000 * (attempt + 1));\r\n    }\r\n  }\r\n  throw new Error('כל הניסיונות נכשלו');\r\n};\r\n\r\n// פונקציה לפירוק קובץ SRT\r\nconst parseSRT = (content) => {\r\n  try {\r\n    const blocks = content.trim().split('\\n\\n');\r\n    return blocks.map((block, index) => {\r\n      const lines = block.split('\\n');\r\n      if (lines.length < 3) {\r\n        console.log(`בלוק ${index + 1} לא תקין:`, lines); // לוג לבדיקה\r\n        return {\r\n          index: index + 1,\r\n          timeCode: lines[1] || '',\r\n          text: lines[2] || ''\r\n        };\r\n      }\r\n      return {\r\n        index: index + 1,\r\n        timeCode: lines[1],\r\n        text: lines.slice(2).join('\\n')\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('שגיאה בפירוק הקובץ:', error);\r\n    throw new Error(`שגיאה בפירוק הקובץ: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const translateSRT = async (content, targetLang, onProgress) => {\r\n  try {\r\n    console.log('מתחיל תרגום...'); // לוג לבדיקה\r\n    const blocks = parseSRT(content);\r\n    console.log(`נמצאו ${blocks.length} בלוקים`); // לוג לבדיקה\r\n    \r\n    const translatedBlocks = [];\r\n    let lastProgress = 0;\r\n\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      const block = blocks[i];\r\n      try {\r\n        console.log(`מתרגם בלוק ${i + 1}/${blocks.length}`); // לוג לבדיקה\r\n        const translatedText = await translateSingleText(block.text, targetLang);\r\n        translatedBlocks.push({\r\n          ...block,\r\n          text: translatedText\r\n        });\r\n\r\n        const progress = Math.round(((i + 1) / blocks.length) * 100);\r\n        if (progress > lastProgress) {\r\n          lastProgress = progress;\r\n          if (onProgress) {\r\n            onProgress(progress);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(`שגיאה בתרגום בלוק ${i + 1}:`, error);\r\n        throw new Error(`שגיאה בתרגום בלוק ${i + 1}: ${error.message}`);\r\n      }\r\n    }\r\n\r\n    const result = translatedBlocks\r\n      .map(block => `${block.index}\\n${block.timeCode}\\n${block.text}`)\r\n      .join('\\n\\n');\r\n    \r\n    console.log('התרגום הושלם בהצלחה'); // לוג לבדיקה\r\n    return result;\r\n  } catch (error) {\r\n    console.error('שגיאה בתרגום הקובץ:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const fileName = `${Date.now()}-${file.name}`\r\n    const { data: storageData, error: storageError } = await supabase.storage\r\n      .from('srt-files')\r\n      .upload(fileName, file)\r\n    \r\n    if (storageError) throw storageError\r\n\r\n    const { data: fileData, error: dbError } = await supabase\r\n      .from('files')\r\n      .insert([\r\n        { \r\n          name: file.name,\r\n          storage_path: storageData.path,\r\n          size: file.size,\r\n          created_at: new Date()\r\n        }\r\n      ])\r\n      .select()\r\n    \r\n    if (dbError) throw dbError\r\n    return fileData[0]\r\n  } catch (error) {\r\n    console.error('שגיאה בהעלאת הקובץ:', error.message)\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const getFiles = async () => {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('files')\r\n      .select('*')\r\n      .order('created_at', { ascending: false })\r\n    \r\n    if (error) throw error\r\n    return data\r\n  } catch (error) {\r\n    console.error('שגיאה בקבלת הקבצים:', error.message)\r\n    throw error\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}